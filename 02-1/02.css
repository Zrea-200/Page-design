* {
    /* 初始化 */
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    /* 100%窗口宽高 */
    /* vh(Viewport Height)是基于视图窗口的单位,1vh 等于视口高度的1% */
    min-height: 100vh;
    /* 弹性布局 居中演示 */
    display: flex;
    justify-content: center;
    align-items: center;
    /* 渐变背景 */
    /* 渐变轴为180度，从#343渐变到#564 */
    background: linear-gradient(180deg, #343, #564);
}

.container {
    width: 800px;
    height: 500px;
    /* max-width 属性用来给元素设置最大宽度值。定义了 max-width 的元素会在达到 max-width 值之后避免进一步按照 width 属性设置变大。
    max-width 会覆盖width设置，但 min-width设置会覆盖 max-width. */
    max-width: 100%;
    /* 相对定位 */
    position: relative;
    /* 默认第一张图作为背景 */
    background: url(img/1.jpg) no-repeat;
}

.clip {
    width: 100%;
    height: 100%;
    /* background-repeat CSS 属性定义背景图像的重复方式。背景图像可以沿着水平轴，垂直轴，两个轴重复，或者根本不重复。 */
    /* 默认情况下，重复的图像被剪裁为元素的大小，但它们可以缩放 (使用 round) 或者均匀地分布 (使用 space). */
    background-repeat: no-repeat;
    /* background-size 设置背景图片大小。图片可以保有其原有的尺寸，或者拉伸到新的尺寸，或者在保持其原有比例的同时缩放到元素的可用空间的尺寸。 */
    /* cover 缩放背景图片以完全覆盖背景区，可能背景图片部分看不见。和 contain 值相反，cover 值尽可能大的缩放背景图像并保持图像的宽高比例（图像不会被压扁）。
     * 该背景图以它的全部宽或者高覆盖所在容器。当容器和背景图大小不同时，背景图的 左/右 或者 上/下 部分会被裁剪。
     */
    background-size: cover;
    /* 绝对定位 */
    position: absolute;
    /* 过渡动画 */
    /* transition CSS 属性是 transition-property、transition-duration、transition-timing-function 和 transition-delay 的一个简写属性。 */
    /* 零或一个值表示要使用的过渡函数 */
    /* 指示插值开始缓慢，速度加快，然后在结束时减速。这个关键字代表缓和函数立方体-Bezier(0.42，0.0，0.58，1.0).在一开始，它的行为就像ease-in函数；在结束时，它就像ease-out的函数。 */
    transition: 0.3s ease-in-out;
}

.clip-2 {
    background-image: url(img/2.jpg);
    /* clip-path可以创建一个只有元素的部分区域可以显示的剪切区域（区域内的部分显示，区域外的隐藏） */
    /* polygon可以指定剪切区域为任意多边形 */
    /* clip-path CSS属性创建了一个剪辑区域，该区域设置了应该显示元素的哪一部分。区域内的部分会显示出来，而区域外的部分则会隐藏起来。 */
    /* polygon 使用SVG填充规则和一组顶点定义多边形。 */
    /* 三对或三对以上的值（一个多边形至少要画一个三角形）。这些值是参照参考框绘制的坐标。 */
    /* 通过 clip-path的 polygon 属性来设置剪切蒙版 */
    clip-path: polygon(43% 0, 100% 0, 38% 100%, 13% 100%);
}

.clip-3 {
    background-image: url(img/3.jpg);
    clip-path: polygon(100% 0, 100% 0, 100% 100%, 38% 100%);
}

/* 鼠标悬停 */
/* 当鼠标经过时，裁剪区域变化，由原来的部分显示变为全部显示 */
/* :hover CSS 伪类适用于用户使用指示设备虚指一个元素（没有激活它）的情况。
 * 这个样式会被任何与链接相关的伪类重写，像:link、:visited 和 :active 等。为了确保生效，
 * :hover 规则需要放在 :link 和 :visited 规则之后，
 * 但是在:active 规则之前，
 * 按照 LVHA 的顺序声明 :link－:visited－:hover－:active。
 * :hover 伪类可以在任何伪元素上使用。 */
/* 显示背景图片 */
/* 因为此时分割区域是一条线 */
.container:hover .clip {
    clip-path: polygon(100% 0, 100% 0, 100% 100%, 100% 100%);
}

/* 显示2，3图片 */
/* 此时分割区域是整张图片 */
.container .clip:hover {
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%);
}